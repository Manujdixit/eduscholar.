// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Colleges {
  id                         Int      @id @default(autoincrement())
  college_name               String
  location                   String
  established                DateTime
  email                      String
  contact                    String
  logo_url                   String
  bg_url                     String
  media_url                  Json
  rating                     Float // Must be between 1 and 10
  score                      Int // Must be between 1 and 999
  intake_start_date          DateTime
  pr_pathway                 Boolean
  slug                       String   @unique
  total_students             Int      @default(0)
  acceptance_rate            Float    @default(0)
  international_student_rate Float    @default(0)

  CollegesCourses    CollegesCourses[]
  CollegewiseContent CollegewiseContent[]

  primary_stream Stream @relation(fields: [streamId], references: [id])

  city     City[]
  state    State[]
  country  Country[]
  streamId Int       @default(1)

  meta_desc String
  og_img    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  id                 Int    @id @default(autoincrement())
  course_name        String
  duration_in_months Int
  rating             Float // Must be between 1 and 10
  score              Int // Must be between 1 and 999
  stream             Stream @relation(fields: [streamId], references: [id])
  streamId           Int

  CollegesCourses CollegesCourses[]

  meta_desc String
  og_img    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollegesCourses {
  id                 Int    @id @default(autoincrement())
  name               String
  duration_in_months Int
  tution_fees        Float
  hostel_fees        Float
  one_time_fees      Float
  other_fees         Json

  college    Colleges @relation(fields: [college_id], references: [id])
  college_id Int

  course    Courses @relation(fields: [course_id], references: [id])
  course_id Int

  stream   Stream @relation(fields: [streamId], references: [id])
  streamId Int

  meta_desc String
  og_img    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollegewiseContent {
  id      Int                     @id @default(autoincrement())
  title   String
  content String
  silos   CollegewiseContentSilos @default(info)

  meta_desc String
  og_img    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  college    Colleges @relation(fields: [college_id], references: [id])
  college_id Int
}

enum CollegewiseContentSilos {
  info
  course
  fees
  scholarship
  placement
  news
  ranking
  other
}

model Articles {
  id      Int           @id @default(autoincrement())
  title   String
  content String
  silos   ArticlesSilos @default(news)

  meta_desc String
  og_img    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArticlesSilos {
  news
  exam
  course
  blog
  other
}

model LeadForm {
  id     Int    @id @default(autoincrement())
  name   String
  email  String
  phn_no String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subsciption {
  id     Int    @id @default(autoincrement())
  name   String
  phn_no String
  email  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  Colleges   Colleges? @relation(fields: [collegesId], references: [id])
  collegesId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  Colleges   Colleges? @relation(fields: [collegesId], references: [id])
  collegesId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  Colleges   Colleges? @relation(fields: [collegesId], references: [id])
  collegesId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  Colleges        Colleges[]
  Courses         Courses[]
  CollegesCourses CollegesCourses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactUs {
  id       Int    @id @default(autoincrement())
  name     String
  phn_no   String
  email    String
  user_msg String
  text1    String
  text2    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
